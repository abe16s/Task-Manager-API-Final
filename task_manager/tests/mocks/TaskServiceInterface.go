// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/abe16s/Go-Backend-Learning-path/task_manager/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TaskServiceInterface is an autogenerated mock type for the TaskServiceInterface type
type TaskServiceInterface struct {
	mock.Mock
}

// AddTask provides a mock function with given fields: task
func (_m *TaskServiceInterface) AddTask(task domain.Task) (*domain.Task, error) {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for AddTask")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Task) (*domain.Task, error)); ok {
		return rf(task)
	}
	if rf, ok := ret.Get(0).(func(domain.Task) *domain.Task); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: id
func (_m *TaskServiceInterface) DeleteTask(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTaskById provides a mock function with given fields: id
func (_m *TaskServiceInterface) GetTaskById(id uuid.UUID) (*domain.Task, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskById")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*domain.Task, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.Task); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasks provides a mock function with given fields:
func (_m *TaskServiceInterface) GetTasks() ([]domain.Task, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTaskByID provides a mock function with given fields: id, updatedTask
func (_m *TaskServiceInterface) UpdateTaskByID(id uuid.UUID, updatedTask domain.Task) error {
	ret := _m.Called(id, updatedTask)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, domain.Task) error); ok {
		r0 = rf(id, updatedTask)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskServiceInterface creates a new instance of TaskServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskServiceInterface {
	mock := &TaskServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
